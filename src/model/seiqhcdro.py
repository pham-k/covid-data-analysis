#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jul 26 10:17:36 2021

@author: kyo
"""

# %%
import pandas as pd
import numpy as np
from datetime import date
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
from lmfit import minimize, Parameters, Parameter, report_fit
# %%

# Generated by SEIQHCDRO COVID-19 Modelling Team for Vietnam: Hoang-Anh NGO, Tuan Khoi NGUYEN and Thu-Anh NGUYEN

# Population: {N} people
N = 10000000
# The outbreak is assumed to begin on {date}, with R0 = {r0}
date = pd.to_datetime('2021-05-27')
r0 = 4.1
# numbers of days
ndate = 150
# The outbreak has {n_r0} stages, starting on days {day}:
n_r0 = 1
day = 0
# _Reduction of R0 through each stage: {delta_r0}
delta_r0 = -1
# _Containing proportion through each stage: {pcont}
pcont = 0.1
# Infectious period: {tinf} days
tinf = 3.5
# Incubated period: {tinc} days
tinc = 5.5
# Hospitalised Duration: {thsp} days
thsp = 21
# Critical Status Duration: {tcrt} days
tcrt = 7
# Intensive Care Duration: {ticu} days
ticu = 10
# Quarantine Duration: {tqar} days
tqar = 21
# Quarantine in Hospital Duration: {tqah} days
tqah = 2
# Recovery time: {trec} days
trec = 21
# Quarantined proportion: {pquar}
pquar = 0.75
# Cross-contamination proportion: {pcross}
pcross = 0.5
# Quarantined & Hospitalised proportion {pqhsp}
pqhsp = 0.1
# Journal impact level: {pj*100}%
pj = 0.12
# Hospitalised rate: {ph*100}%
ph = 0.2
# Critical rate: {pc*100}%
pc = 0.1
# Death rate: {pf*100}%
pf = 0.1
# Hospital capacity is {hcap}, which is {'not enough' if hcap<np.max(hsp) else 'sufficient'} for the worst day of the outbreak, with {np.max(hsp)} hospital patients.
hcap = 100000
# Hospital capacity is {hqar}, which is {'not enough' if hqar<np.max(qar) else 'sufficient'} for the worst day of the outbreak, with {np.max(qar)} hospital patients.
hqar = 100000
# The final outcome of the outbreak is
# _{np.max(ift)} COVID-19 positive cases
# _{np.max(qar)} quarantined individuals 
# _{np.max(hsp)} hospitalised patients
# _{np.max(crt)} in critical condition
# _{np.max(ded)} deceased


#%%
def R0_dynamic(t):
        r"""
        Get R0 based on day and stage inputs.

        Parameters
        ----------
        t : `int`
            Number of days passed since initial outbreak.

        Returns
        -------
        r0 : `float`
            Corresponding reproductive number.
        """
        # Default stage when created initially
        if not delta_r0 or not pcont or not day:
            return 4.1
        # No change yet: Keep to default
        elif t < day[0]:
            return r0
        else:
            i = 0
            # Check which stage t is in
            while t >= day[i]:
                if (i == len(day) - 1) or (t < day[i + 1]):
                    break
                i += 1
            # Initial stage
            if i == 0:
                return r0 * (1 - pcont[0]) - 2 * delta_r0[0] / 30 * (t - (day[0] - 1)) * pcont[0]
            else:
                # Recursively call the function, as R0 works in a similar fashion to Hidden Markov Model
                # If there is increase in proportion contamination (See formula for details)
                if pcont[i] >= pcont[i - 1]:
                    return max(
                        min(R0_dynamic(day[i] - 1), r0 * (1 - pcont[i])) - 2 * delta_r0[i] / 30 * (t - (day[i] - 1)) *
                        pcont[i], 0)
                # If there is decrease in proportion contamination (See formula for details)
                else:
                    if min(R0_dynamic(day[i] - 1), r0 * (1 - pcont[i])) > 0:
                        return min(R0_dynamic(day[i] - 1), r0 * (1 - pcont[i])) + 2 * delta_r0[i] / 30 * (
                                t - (day[i] - 1)) * (1 - pcont[i])
                    else:
                        return 0.0


def SEIQHCDRO_model(t, y, R_0,
                    T_inf, T_inc, T_hsp, T_crt, T_icu, T_quar, T_quar_hosp, T_rec,
                    p_h, p_c, p_f, p_jrnl, p_quar, p_quar_hosp, p_cross_cont):
    """
    Main function of SEIQHCDRO model.

    Parameters:
    ---
    t: time step for solve_ivp
    y: solution of previous timestep (or initial solution)
    R_0: basic reproduction number. This can be a constant, or a function with respect to time. These two cases are handled using an if condition of the callability of R_0.
    T_inf: infectious period of an infected agent
    T_inc: incubation time
    T_hsp: duration for an infected agent to check into a health agency
    T_crt: duration for a hospitalised person to turn into a critical case since the initial check-in
    T_icu: duration for a person to stay in the Intensive Care Unit until a clinical outcome has been decided (Recovered or Death)
    T_quar: duration of quarantine, indicated by the government
    T_quar_hosp: duration from the start of quarantine until the patient get tested positive for COVID-19 and hospitalised
    p_h: proportion of hospitalised patients
    p_c: proportion of hospitalised patients who switched to a critical case
    p_f: proportion of critical cases resulting in death
    p_cont: the reduced percentage of contact tracing between individuals in the population due to policy measures. Same as R_0, this can be a constant or a function with respect to time. These two cases are also handled using an if condition.
    p_jrnl: the reduced percentage of contact tracing between individuals in the population due to policy measures. The percentage of p_jrnl are kept constant, since COVID-19 news, policies and activities are updated everyday, regardless whether there is an outbreak.
    p_quar: proportion of exposed individual who are quarantined, either at home or at a facility under the supervision of local authority
    p_quar_hosp: proportion of quarantined individuals who are infected with COVID-19 and hospitalised
    p_cross_cont: cross contamination ratio within quarantined facility under the supervision of local authority

    Returns
    ---
    dy_dt: `list`
        List of numerical derivatives calculated.
    """

    # Check if R is constant or not
    if callable(R_0):
        def R0_dynamic(t):
            return R_0(t)
    else:
        def R0_dynamic(t):
            return R_0

    S, E, I, Q, H, C, D, R, O = y

    dS_dt = - R0_dynamic(t) * (1 / T_inf + (1 - p_h) / T_rec) * I * S
    dE_dt = R0_dynamic(t) * (1 / T_inf + (1 - p_h) / T_rec) * I * S - 1 / T_inc * E - p_quar * (E) / T_quar
    dI_dt = 1 / T_inc * E - (p_h / T_inf + (1 - p_h) / T_rec) * I
    dQ_dt = p_quar * (E) / T_quar - (p_quar_hosp + p_cross_cont) * Q / T_quar_hosp
    dH_dt = p_h / T_inf * I - (1 - p_c) / T_hsp * H - p_c / T_crt * H - p_h / T_rec * H + (
                p_quar_hosp + p_cross_cont) * Q / T_quar_hosp
    dC_dt = p_c / T_crt * H - C / (T_icu + T_crt)
    dD_dt = p_f / (T_icu + T_crt) * C
    dR_dt = (1 - p_c) / T_hsp * H + (1 - p_f) / (T_icu + T_crt) * C
    dO_dt = (1 - p_h) / T_rec * I + p_h / T_rec * H

    dy_dt = [dS_dt, dE_dt, dI_dt, dQ_dt, dH_dt, dC_dt, dD_dt, dR_dt, dO_dt]
    return dy_dt

# %%


args = (R0_dynamic,
        tinf, tinc, thsp, tcrt,
        ticu, tqar, tqah, trec,
        ph, pc, pf,
        pj, pquar, pqhsp, pcross)

n_infected = 1

# SEIQHCDRO
initial_state = [(N - n_infected) / N, 0, n_infected / N,
                 0,
                 0,
                 0,
                 0,
                 0,
                 0]

# %%
sol = solve_ivp(SEIQHCDRO_model, [0, ndate],
                    initial_state, args=args,
                    t_eval=np.arange(ndate+1), method="Radau")
S, E, I, Q, H, C, D, R, O = sol.y

# %%

fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(np.arange(ndate+1), E, color='orange', lw=2)
ax.plot(np.arange(ndate+1), I, color='red', lw=2)
ax.plot(np.arange(ndate+1), D, color='black', lw=2)